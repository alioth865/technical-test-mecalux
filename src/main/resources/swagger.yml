openapi: 3.0.0
info:
  title: Technical Test Mecalux
  description: Technical Test Mecalux
  version: "1.0"
servers:
  - url: https://localhost:8080
paths:
  /warehouse/{idWarehouse}/rack:
    get:
      tags:
        - rack
      summary: Return all racks from a warehouse
      description: Return all racks from a warehouse
      operationId: listRacks
      parameters:
        - name: idWarehouse
          in: path
          description: Warehouse ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Get all racks from a warehouse
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RackDTO'
        '404':
          description: Resources not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - rack
      summary: Add a new rack to a warehouse
      description: Add a new rack to a warehouse
      operationId: addRack
      parameters:
        - name: idWarehouse
          in: path
          description: Warehouse ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Create a new rack
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RackDTORequest'
        required: true
      responses:
        '201':
          description: Get a created rack
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RackDTO'
        '404':
          description: Resources not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict to create rack
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /warehouse/{idWarehouse}/rack/{idRack}:
    delete:
      tags:
        - rack
      summary: Delete a rack by id into a warehouse
      description: Delete a rack by id into a warehouse
      operationId: deleteRackById
      parameters:
        - name: idWarehouse
          in: path
          description: Warehouse ID
          required: true
          schema:
            type: integer
            format: int64
        - name: idRack
          in: path
          description: Rack ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: The rack was deleted successfully
        '404':
          description: Resources not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /warehouse:
    get:
      tags:
        - warehouse
      summary: Return all warehouses
      description: Return all warehouses
      operationId: listWarehouses
      responses:
        '200':
          description: Get all warehouses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WarehouseDTO'
    post:
      tags:
        - warehouse
      summary: Add a new warehouse
      description: Add a new warehouse
      operationId: addWarehouse
      requestBody:
        description: Create a new warehouse
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseDTO'
        required: true
      responses:
        '201':
          description: Get a created warehouse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseDTO'
  /warehouse/{idWarehouse}:
    put:
      tags:
        - warehouse
      summary: Update an existing warehouse
      description: Update an existing warehouse
      operationId: updateWarehouseById
      parameters:
        - name: idWarehouse
          in: path
          description: Warehouse ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent warehouse
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseDTO'
      responses:
        '200':
          description: Get an updated warehouse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseDTO'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resources not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - warehouse
      summary: Return a warehouse by id
      description: Return a warehouse by id
      operationId: getWarehouseById
      parameters:
        - name: idWarehouse
          in: path
          description: Warehouse ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Get a warehouse by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseDTO'
        '404':
          description: Resources not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - warehouse
      summary: Delete a warehouse by id
      description: Delete a warehouse by id
      operationId: deleteWarehouseById
      parameters:
        - name: idWarehouse
          in: path
          description: Warehouse ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: The Warehouse was deleted successfully
        '404':
          description: Resources not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /warehouse/{idWarehouse}/allPossibilities:
    get:
      tags:
        - warehouse
      summary: Calculates the possible rack type permutations in a warehouse
      description: Calculates the possible rack type permutations in a warehouse
      operationId: allRackPermutationInWarehouse
      parameters:
        - name: idWarehouse
          in: path
          description: Warehouse ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Get all permutations in a warehouse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermutationDTO'
components:
  schemas:
    WarehouseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
          readOnly: true
        uuid:
          type: string
          example: 27efcb04-455d-11ed-b878-0242ac120002
        client:
          type: string
          example: juan123
        family:
          type: string
          enum:
            - EST
            - ROB
        size:
          type: integer
          example: 10
    RackDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
          readOnly: true
        warehouse:
          $ref: '#/components/schemas/WarehouseDTO'
        uuid:
          type: string
          example: 91bb3d9c-455e-11ed-b878-0242ac120002
        type:
          type: string
          enum: [ A, B, C, D ]
    RackDTORequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
          readOnly: true
        uuid:
          type: string
          example: 91bb3d9c-455e-11ed-b878-0242ac120002
        type:
          type: string
          enum: [ A, B, C, D ]
    PermutationDTO:
      type: array
      items:
        type: string

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: Code of exception
          example: EXC-001
        detail:
          type: string
          description: Detail of exception
          example: Resource does not exist
